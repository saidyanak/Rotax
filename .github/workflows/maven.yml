name: CI & CD Pipeline (AWS)

# Pipeline ne zaman çalışacak?
on:
  push:
    branches: [ "main" ] # Sadece 'main' branch'ine push'landığında
  pull_request:
    branches: [ "main" ] # veya 'main'e bir PR açıldığında

# Tüm işlerin (jobs) kullanacağı genel değişkenler
env:
  ECR_REGISTRY: 116981803650.dkr.ecr.eu-north-1.amazonaws.com
  ECR_REPOSITORY: rotax_backend
  AWS_REGION: eu-north-1

jobs:
  # ------ AŞAMA 1: CI (Test Etme) ------
  # Bu aşama, her push'ta ve her PR'da çalışır.
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file for testing
      run: |
        echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
        echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
        echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo ".env file created with ALL secrets"

    - name: Docker Setup Compose
      uses: docker/setup-compose-action@v1.2.0

    - name: Start services with Docker Compose (CI)
      run: docker compose -f docker-compose.ci.yml up -d

    - name: Wait for services
      run: |
        for i in {1..10}; do
          if docker compose -f docker-compose.ci.yml ps | grep -q "running"; then
            echo "Services are up and running!"
            break
          fi
          echo "Waiting for services to start..."
          sleep 10
        done

    - name: Show container logs (for debugging)
      run: docker compose -f docker-compose.ci.yml logs auth

    - name: Check if application is running
      run: |
        curl -f http://localhost:8080/swagger-ui/index.html || exit 1
        echo "Application is running successfully!"

  # ------ AŞAMA 2: PUSH (Docker İmajını ECR'a Yükleme) ------
  # Bu aşama, SADECE 'build-and-test' başarılı olursa VE 'main' branch'ine PUSH yapılırsa çalışır.
  push-to-ecr:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --platform linux/amd64 -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest -f Rotax/Dockerfile.prod ./Rotax
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  # ------ AŞAMA 3: DEPLOY (Sunucuya Kurma) ------
  # Bu aşama, SADECE 'push-to-ecr' başarılı olursa çalışır.
  deploy-to-ec2:
    needs: push-to-ecr
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to Server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Sunucuda oluşturduğumuz klasöre git
          cd rotax_app
          
          # Sunucunun ECR'da oturum açmasını sağla
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          # 'docker-compose.prod.yml' dosyasını kullanarak en yeni 'auth' imajını çek
          docker compose -f docker-compose.prod.yml pull auth
          
          # Sadece 'auth' servisini yeniden başlat (DB'ye dokunmaz)
          docker compose -f docker-compose.prod.yml up -d --no-deps auth
          
          # Sistemdeki eski, kullanılmayan imajları temizle
          docker image prune -f
