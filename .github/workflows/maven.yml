# Sadece CI (Derleme ve Test) yapan pipeline
name: CI Pipeline (Build and Test)

on:
  push:
    branches: [ "main" ] 
  pull_request:
    branches: [ "main" ] 

jobs:
  # Sadece CI (Test Etme) Aşaması
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 'build-and-test' işinin içindeki bu adımı güncelle
    - name: Create .env file for testing
      run: |
        echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
        echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
        echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo ".env file created with ALL secrets"

    - name: Docker Setup Compose
      uses: docker/setup-compose-action@v1.2.0

    - name: Start services with Docker Compose (CI)
      run: docker compose -f docker-compose.ci.yml up -d

    - name: Wait for services
      run: |
        echo "Waiting for services to become healthy..."
        # Süreyi 75 saniyeye çıkardık
        sleep 75

    # HATA AYIKLAMA ADIMI: Uygulama loglarını göster
    - name: Show container logs (for debugging)
      run: docker compose -f docker-compose.ci.yml logs auth

    - name: Check if application is running
      run: |
        curl -f http://localhost:8080/swagger-ui/index.html || exit 1
        echo "Application is running successfully!"
