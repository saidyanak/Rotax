name: CI with Docker Compose

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # 1. Kodları indir
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. GitHub Secrets'tan .env dosyası oluştur
    - name: Create .env file
      run: |
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        # .env-example dosyanızdaki TÜM DEĞİŞKENLERİ buraya ekleyin
        echo ".env file created"

    # 3. SENİN İSTEDİĞİN ADIM: Docker Compose'u kur
    # Senin yapıştırdığın bozuk YAML'ı düzelttim.
    # Bu adım, 'docker compose' (boşluklu, V2) komutunu hazırlar.
    - name: Docker Setup Compose
      uses: docker/setup-compose-action@v1.2.0
      # 'with:' bloğuna şimdilik gerek yok, varsayılanlar V2 için yeterli.

    # 4. CI için olan docker-compose dosyası ile tüm servisleri başlat
    # BİR ÜSTTEKİ ADIM V2 (boşluklu) komutunu hazırladığı için
    # BURADA DA V2 (boşluklu) komutunu kullanıyoruz.
    - name: Start services with Docker Compose
      run: docker compose -f docker-compose.ci.yml up -d

    # 5. Servislerin tam olarak başlaması için bekle
    - name: Wait for services
      run: |
        echo "Waiting for services to become healthy..."
        sleep 45

    # 6. Uygulamanın çalışıp çalışmadığını kontrol et
    - name: Check if application is running
      run: |
        curl -f http://localhost:8080/swagger-ui/index.html || exit 1
        echo "Application is running successfully!"
